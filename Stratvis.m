function Stratvis
close all;
clear all;
clc;


f = figure('Name', 'StratVis', ...
    'Visible', 'on', ...
    'Position', [0,0,1366,768], ...
    'NumberTitle', 'Off', ...
    'MenuBar', 'none', ...
    'resize', 'on'...
    );

set(gcf,'color',[0.3 0.3 0.3])

uicontrol( ...
    'Parent', f, ...
    'Style', 'text', ...
    'HorizontalAlignment', 'left', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'FontSize', 10, ...
    'ForegroundColor','w',...
    'String', 'Participant :', ...
    'Position', [100, 530, 105, 20]...
    );

participant_edit = uicontrol( ...
    'Parent', f, ...
    'Style', 'text', ...
    'HorizontalAlignment', 'left', ...
    'FontSize', 10, ...
    'ForegroundColor','w',...
    'BackgroundColor',[0.3 0.3 0.3],...
    'String', '', ...
    'Position', [190, 530, 260, 20]...
    );
uicontrol( ...
    'Parent', f, ...
    'Style', 'text', ...
    'HorizontalAlignment', 'left', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'FontSize', 10, ...
    'String', 'Données statistiques :', ...
    'ForegroundColor','w',...
    'Position', [50, 410, 200, 20]...
    );
calculer_button = uicontrol(...
    'Parent', f, ...
    'Style', 'pushbutton', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'FontSize', 10, ...
    'String', 'Calculer', ...
    'ForegroundColor','w',...
    'Position', [210, 410, 105, 25], ...
    'callback', {@calculer_callback}...
    );
set(calculer_button,'Enable','off')

export_button =uicontrol(...
    'Parent', f, ...
    'Style', 'pushbutton', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'FontSize', 10, ...
    'ForegroundColor','w',...
    'String', 'Exporter', ...
    'Position', [325, 410, 105, 25], ...
    'callback', {@export_callback}...
    );
set(export_button,'Enable','off')
%---------------------------------------------------------------------------------------------------------------------
%----------------------------------------------Panel de chargement----------------------------------------------------
%---------------------------------------------------------------------------------------------------------------------

chargement = uipanel( ...
    'Parent', f, ...
    'Title', 'Chargement des données', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'Units', 'Pixels', ...
    'FontSize', 10, ...
    'ForegroundColor','w',...
    'HighLightColor','w',...
    'Position', [50, 600, 300, 150 ] ...
    );

load_button1 = uicontrol('Parent', chargement, ...
    'Style', 'pushbutton', ...
    'FontSize', 10, ...
    'String', 'Coordonnées Marqueur', ...
    'ForegroundColor','w',...
    'BackgroundColor',[0.3 0.3 0.3],...
    'Tag','Load_button1',...
    'Position', [50, 100, 200, 30], ...
    'callback', {@load1_callback}...
    );

load_button2 = uicontrol('Parent', chargement, ...
    'Style', 'pushbutton', ...
    'FontSize', 10, ...
    'String', 'Coordonnées Masques', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'ForegroundColor','w',...
    'Tag','Load_button2',...
    'Position', [50, 60, 200, 30], ...
    'callback', {@load2_callback}...
    );
set(load_button2, 'Enable', 'off');

load_button3 = uicontrol('Parent', chargement, ...
    'Style', 'pushbutton', ...
    'FontSize', 10, ...
    'String', 'Vidéo', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'ForegroundColor','w',...
    'Tag','Load_button3',...
    'Position', [50, 20, 200, 30],...
    'callback', {@load3_callback}...
    );
set(load_button3, 'Enable', 'off');

%---------------------------------------------------------------------------------------------------------------------
%----------------------------------------------PanelVidéo-------------------------------------------------------------
%---------------------------------------------------------------------------------------------------------------------
v = uipanel( ...
    'Parent', f, ...
    'Title', 'Video', ...
    'Units', 'Pixels', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'ForegroundColor','w',...
    'FontSize', 10, ...
    'HighLightColor','w',...
    'Position', [520, 430, 800, 320 ] ...
    );

movie_scrn = axes( ...
    'Parent', v, ...
    'tag', 'movie_scrn', ...
    'Units', 'Pixels', ...
    'YTick', [], ...
    'XTick', [], ...
    'NextPlot', 'add', ...
    'Position', [20, 10, 380, 340] ...
    );
set(movie_scrn, 'Visible', 'off');

movie_slider = uicontrol( ...
    'Parent', v, ...
    'Style', 'slider', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'String', 'test', ...
    'Position', [480, 90, 200, 20], ...
    'Callback', {@movieslider_callback}...
    );
set(movie_slider,'Enable','off')
set(movie_slider, 'min',1);
set(movie_slider, 'max',100);
set(movie_slider, 'value',2);
addlistener(movie_slider, 'ContinuousValueChange', @movieslider_callback);

play_button = uicontrol( ...
    'Parent', v, ...
    'Style', 'pushbutton', ...
    'ForegroundColor','w',...
    'FontSize', 10, ...
    'String', 'Play', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'Tag','play_button',...
    'Position', [490, 240, 60, 25],...
    'callback', {@play_Callback} ...
    );
set(play_button,'Enable','off')

stop_button = uicontrol( ...
    'Parent', v, ...
    'Style', 'pushbutton', ...
    'FontSize', 10, ...
    'ForegroundColor','w',...
    'String', 'Pause', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'Position', [560, 240, 60, 25],...
    'callback', {@stop_Callback} ...
    );
uicontrol( ...
    'Parent', v, ...
    'Style', 'text', ...
    'HorizontalAlignment', 'left', ...
    'FontSize', 10, ...
    'String', 'Début (sec) :', ...
    'ForegroundColor','w',...
    'BackgroundColor',[0.3 0.3 0.3],...
    'Position', [470, 170, 105, 15], ...
    'callback', {@stop_Callback} ...
    );
set(stop_button,'Enable','off')

starttimemap_edit = uicontrol( ...
    'Parent', v, ...
    'Style', 'edit', ...
    'FontSize', 10, ...
    'ForegroundColor','w',...
    'Value', 0, ...
    'Position', [600, 170, 60, 20],...
    'BackgroundColor',[0.3 0.3 0.3],...
    'Callback', {@time_edit_callback}...
    );
uicontrol( ...
    'Parent', v, ...
    'Style', 'text', ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor','w',...
    'FontSize', 10, ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'String', 'Temps actuel (sec) :', ...
    'Position', [470, 200, 125, 20], ...
    'callback', {@stop_Callback} ...
    );

Currenttime_edit = uicontrol( ...
    'Parent', v, ...
    'Style', 'text', ...
    'ForegroundColor','w',...
    'BackgroundColor',[0.3 0.3 0.3],...
    'FontSize', 10, ...
    'Value', 0, ...
    'Position', [600, 200, 60, 20]...
    );
% endtimemap_text =
uicontrol( ...
    'Parent', v, ...
    'Style', 'text', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor','w',...
    'FontSize', 10, ...
    'String', 'Fin (sec) :', ...
    'Position', [470, 140, 105, 15] ...
    );

endtimemap_edit = uicontrol( ...
    'Parent', v, ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'ForegroundColor','w',...
    'Style', 'edit', ...
    'FontSize', 10, ...
    'Position', [600, 140, 60, 20],...
    'Callback', {@endtime_callback}...
    );

handles.valider = uicontrol( ...
    'Parent', v, ...
    'Style', 'pushbutton', ...
    'BackgroundColor',[0.3 0.3 0.3],...
    'ForegroundColor','w',...
    'FontSize', 10, ...
    'String', 'Valider intervalle', ...
    'Position',[520, 20, 120, 25] ,...
    'callback', {@Valider_Callback} ...
    );

set(handles.valider,'Enable','off')

%---------------------------------------------------------------------------------------------------------------------
%----------------------------------------------Tableau--------------------------------------------------------------
%---------------------------------------------------------------------------------------------------------------------
tab = uitable(...
    'Parent',f,...
    'ColumnName' , {'ROI','Nombre de fixations','Temps total','Ordre de découverte'},...
    'Position',[50 20 1270 350]...
    );

tab.ColumnEditable = true;
% tab.BackgroundColor=[1 1 1];
% tab.ForegroundColor=[0 0 0];
set(tab,'ColumnWidth',{308});
%les figures se deplacent avec le screen
h_fig = findobj(f, '-not', 'Units', 'normalized');
lgt_h_fig = length(h_fig);
for l = 1:lgt_h_fig
    if isprop(h_fig(l), 'Units')
        set(h_fig(l), 'Units', 'normalized')
    end
end
movegui(f, 'center')


%---------------------------------------------------------------------------------------------------------------------
%----------------------------------------------Variables--------------------------------------------------------------
%---------------------------------------------------------------------------------------------------------------------
handles2.filename3='';
handles2.mem=1;
handles2.endtime=2000;
handles2.depart=1;

handles2.debut=0;
handles2.fin=0;

handles.coords=[];
handles.xBegaze=[];
handles.yBegaze=[];

handles.caract=[];
handles.masque=[];
handles.caract1=[];
handles.masque1=[];
handles.masqueS=[];
handles.fps=[];

handles2.loopbreaker=0;
handles2.obj=[];
%---------------------------------------------------------------------------------------------------------------------
%----------------------------------------------Callbacks--------------------------------------------------------------
%---------------------------------------------------------------------------------------------------------------------
    function load1_callback (~,~)
        [FileName,~,~] = uigetfile('*.txt', 'Selectionner le fichier texte avec les coordonnées du marqueur');
        
        if isequal(FileName,0)
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Veuillez sélectionner le fichier contenant les coordonnées du marqueur (BeGaze)',...
                'Saisie incorrect', mode);
        else
            [~,~,ext] = fileparts(FileName);
        end
        if ~strcmp(string(ext),'.txt')
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Le fichier sélectionné n est pas un .txt',...
                'Saisie incorrect', mode);
        else
            %browser
            %changement nom du bouton
            handles.filename1=FileName;
            handles.marqueur = importdata(FileName);
            %recuperation des données BeGaze
            [handles.coords, handles.xBegaze, handles.yBegaze] = coordonneesBeGaze(handles.filename1);
            %initialisation de l'intervalle d'étude au début et la fin de la
            %vidéo
            handles.debut=min(str2double(handles.coords(:,4)));
            handles.fin=max(str2double(handles.coords(:,5)));
            guidata(load_button1, handles)
            set(load_button2, 'Enable', 'on');
            set(load_button1, 'String' , handles.filename1);
        end
    end
    function load2_callback (~,~)
        %browser
        [FileName,~,~] = uigetfile('*.xml', 'Selectionner le fichier texte avec les coordonnées des masques');
        
        if isequal(FileName,0)
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Veuillez sélectionner le fichier contenant les coordonnées des masques (Sensarea)',...
                'Saisie incorrect', mode);
        else
            [~,~,ext] = fileparts(FileName);
        end
        if ~strcmp(string(ext),'.xml')
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Le fichier sélectionné n est pas un .xml',...
                'Saisie incorrect', mode);
        else
            %changement nom du bouton
            handles.filename2=FileName;
            handles.masque = importdata(FileName);
            %parser XML
            [handles.masqueS, handles.caract, handles.fps] = parserXML(handles.filename2);
            %enregistrement des handles dans une structure
            guidata(load_button1, handles);
            set(load_button3, 'Enable', 'on');
            set(load_button2, 'String' , handles.filename2);
        end
    end
    function load3_callback (~,~)
        %chargement structure
        currAxes = movie_scrn;
        %recuperation nom/chemin ... du fichier recherché
        [FileName,~,~] = uigetfile({'*.avi' ; '*.mp4'}, 'Selectionner la vidéo');
        if isequal(FileName,0)
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Veuillez sélectionner le fichier contenant la vidéo',...
                'Saisie incorrect', mode);
        else
            [~,~,ext] = fileparts(FileName);
        end
        if strcmp(string(ext),'.avi')
            handles2.filename3=FileName ;
            set(load_button3, 'String' , handles2.filename3);
            handles2.mem=1;
            h = waitbar(0,'Veuillez patienter');
            handles2.obj = VideoReader(FileName);
            this_frame = read(handles2.obj, handles2.mem);
            %rotations image
            this_frame=imrotate(this_frame,180);
            this_frame = flip(this_frame ,2);
            %affichage sur l'axe
            image(this_frame, 'Parent', currAxes);
            %declaration du temps de fin de la vidéo
            handles2.endtime =ceil(handles2.obj.FrameRate*handles2.obj.Duration);
            %Détermination taille de la slide bar
            set(movie_slider, 'min',1,'max',handles2.endtime);
            %affichage du temps de début et fin vidéo
            set(starttimemap_edit,'String',0);
            set(endtimemap_edit,'String',handles2.endtime/handles.fps);
            set(participant_edit,'String',handles2.filename3);
            set(calculer_button,'Enable','on')
            set(play_button,'Enable','on')
            set(stop_button,'Enable','on')
            set(handles.valider,'Enable','on')
            set(movie_slider,'Enable','on')
            guidata(calculer_button,handles2)
            close(h);
        elseif strcmp(string(ext),'.mp4')
            handles2.filename3=FileName ;
            set(load_button3, 'String' , handles2.filename3);
            handles2.mem=1;
            h = waitbar(0,'Veuillez patienter');
            handles2.obj = VideoReader(FileName);
            this_frame = read(handles2.obj, handles2.mem);
            %rotations image
            this_frame=imrotate(this_frame,180);
            this_frame = flip(this_frame ,2);
            %affichage sur l'axe
            image(this_frame, 'Parent', currAxes);
            %declaration du temps de fin de la vidéo
            handles2.endtime =ceil(handles2.obj.FrameRate*handles2.obj.Duration);
            %Détermination taille de la slide bar
            set(movie_slider, 'min',1,'max',handles2.endtime);
            %affichage du temps de début et fin vidéo
            set(starttimemap_edit,'String',0);
            set(endtimemap_edit,'String',handles2.endtime/handles.fps);
            set(participant_edit,'String',handles2.filename3);
            set(calculer_button,'Enable','on')
            set(play_button,'Enable','on')
            set(stop_button,'Enable','on')
            set(handles.valider,'Enable','on')
            set(movie_slider,'Enable','on')
            guidata(calculer_button,handles2)
            close(h);
        else
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Le fichier sélectionné n est pas un .avi ou .mp4',...
                'Saisie incorrect', mode);
        end
    end
    function play_Callback(~,~)
        %initialisation axes
        currAxes = movie_scrn;
        %chargement handles
        handles2.loopbreaker =1;
        handles2.depart=handles2.mem;
        %affichage du temps de départ
        set(starttimemap_edit,'String',num2str(round(handles2.depart/handles.fps,2)));
        %boucle d'affichage des frames
        for k= handles2.depart:handles2.endtime
            %condition d'arret
            if handles2.loopbreaker ==1
                %lecture frame
                this_frame = read(handles2.obj,k);
                %rotation de l'image
                this_frame=imrotate(this_frame,180);
                this_frame = flip(this_frame ,2);
                % nettoie l'axe
                cla;
                %affichage image
                image(this_frame, 'Parent', currAxes);
                %enregistrement dans mémoire pour reprendre la boucle après
                %une pause
                handles2.mem = k;
                %mise à jour de la slide bar
                set(movie_slider, 'Value',k);
                %affichage du temps actuel dans la vidéo
                set(Currenttime_edit,'String',num2str(round(k*(1/handles.fps),1)));
                pause(1/60)
            end
            guidata(calculer_button,handles2)
        end
    end
    function stop_Callback(~,~)
        handles2.loopbreaker = 0;
        guidata(calculer_button,handles2)
    end
    function calculer_callback(~,~)
        %calcul des données statistiques
        [handles.caract1, handles.masque1] = codeCaract(handles.masqueS, handles.caract,handles.debut,handles.fin, handles.coords, handles.xBegaze, handles.yBegaze);
        set(tab, 'Data', handles.caract1);
        set(export_button,'Enable','on')
        guidata(calculer_button, handles2);
        guidata(load_button1, handles);
        set(calculer_button,'Enable','off');
    end
    function Valider_Callback(~,~)
        %déclaration des variables correspondant à l'intervalle d'étude en
        %ms
        handles.debut=str2double(get(starttimemap_edit,'String'))*1000;
        handles.fin=str2double(get(endtimemap_edit,'String'))*1000;
        guidata(calculer_button,handles2)
        set(calculer_button,'Enable','on');
        set(export_button,'Enable','on')
    end
    function time_edit_callback(source, ~)
        currAxes = movie_scrn;
        if str2double(get(source,'String')) < 0 || str2double(get(source,'String')) > ceil(handles2.obj.FrameRate*handles2.obj.Duration)
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('La valeur entrée est inférieur à 0 ou supérieur à la durée totale de la vidéo',...
                'Saisie incorrect', mode);
            set(handles.valider,'Enable', 'off');
            set(calculer_button,'Enable','off');
            set(export_button,'Enable','off');
        elseif str2double(get(source,'String'))==str2double(get(endtimemap_edit,'String'))
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Le temps de début ne peut être égal au temps de fin',...
                'Saisie incorrect', mode);
            set(handles.valider,'Enable', 'off');
            set(calculer_button,'Enable','off');
            set(export_button,'Enable','off');
        elseif str2double(get(source,'String'))> str2double(get(endtimemap_edit,'String'))
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Le temps de début ne peut être supérieur au temps de fin',...
                'Saisie incorrect', mode);
            set(handles.valider,'Enable', 'off');
            set(calculer_button,'Enable','off');
            set(export_button,'Enable','off');
        else
            set(handles.valider,'Enable', 'on');
            set(calculer_button,'Enable','on');
            set(export_button,'Enable','on');
            if str2double(get(source,'String'))==0
                handles2.mem=1;
            else
                handles2.mem=str2double(get(source,'String'))*handles.fps;
            end
            this_frame = read(handles2.obj,handles2.mem);
            this_frame=imrotate(this_frame,180);
            this_frame = flip(this_frame ,2);
            image(this_frame, 'Parent', currAxes);
            set(movie_slider, 'Value',handles2.mem);
            set(Currenttime_edit, 'String',handles2.mem/handles.fps);
            currAxes.Visible = 'off' ;
            guidata(calculer_button,handles2)
        end
    end
    function movieslider_callback(source, ~)
        currAxes = movie_scrn;
        val = get(source, 'Value');
        handles2.endtime =ceil(handles2.obj.FrameRate*handles2.obj.Duration);
        set(movie_slider, 'max',handles2.endtime);
        i = round(val);
        set(currAxes, 'NextPlot', 'add', 'YTick', [], 'XTick', []);
        this_frame=read(handles2.obj,i);
        this_frame=imrotate(this_frame,180);
        this_frame = flip(this_frame ,2);
        image(this_frame, 'Parent', currAxes);
        axis off;
        set(Currenttime_edit,'String',i/handles.fps);
        set(endtimemap_edit,'String',handles2.endtime/handles.fps);
        set(starttimemap_edit,'String',i/handles.fps);
        handles2.mem=i;
        guidata(calculer_button,handles2)
        
    end
    function endtime_callback(source,~)
        if str2double(get(source,'String')) < 1 || str2double(get(source,'String')) > ceil(handles2.obj.FrameRate*handles2.obj.Duration)/handles.fps
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('La valeur entrée est inférieur à 0 ou supérieur à la durée totale de la vidéo',...
                'Saisie incorrect', mode);
            set(handles.valider,'Enable', 'off');
            set(calculer_button,'Enable','off');
            set(export_button,'Enable','off');
        elseif str2double(get(source,'String'))==str2double(get(starttimemap_edit,'String'))
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Le temps de début ne peut être égal au temps de fin',...
                'Saisie incorrect', mode);
            set(handles.valider,'Enable', 'off');
            set(calculer_button,'Enable','off');
            set(export_button,'Enable','off');
        elseif str2double(get(source,'String'))<str2double(get(starttimemap_edit,'String'))
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Le temps de début ne peut être supérieur au temps de fin',...
                'Saisie incorrect', mode);
            set(handles.valider,'Enable', 'off');
            set(calculer_button,'Enable','off');
            set(export_button,'Enable','off');
        elseif str2double(get(source,'String'))-str2double(get(starttimemap_edit,'String')) < 1
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Intervalle doit être supérieur ou égal à 1 sec',...
                'Saisie incorrect', mode);
            set(handles.valider,'Enable', 'off');
            set(calculer_button,'Enable','off');
            set(export_button,'Enable','off');
        else
            set(handles.valider,'Enable', 'on');
            set(calculer_button,'Enable','on');
            set(export_button,'Enable','on');
            handles2.endtime=str2double(get(source,'String'))*handles.fps;
            guidata(calculer_button,handles2)
        end
    end
    function export_callback(~,~)
        [file,path]=uiputfile(strcat(char(handles.coords(1,1)),'.txt') , 'Enregistrer le fichier');
        if file==0
            mode = struct('WindowStyle','non-modal',...
                'Interpreter','tex');
            errordlg('Veuillez choisir une destination et le nom du fichier pour enregistrer',...
                'Saisie incorrect', mode);
        else
            exporterTexte(file, path,handles.caract1, handles.coords, handles.debut,handles.fin);
            set(export_button,'Enable','off')
        end
    end
end